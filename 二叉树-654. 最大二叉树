
## 题目地址(654. 最大二叉树)

https://leetcode-cn.com/problems/maximum-binary-tree/

## 题目描述

```
给定一个不含重复元素的整数数组 nums 。一个以此数组直接递归构建的 最大二叉树 定义如下：

二叉树的根是数组 nums 中的最大元素。
左子树是通过数组中 最大值左边部分 递归构造出的最大二叉树。
右子树是通过数组中 最大值右边部分 递归构造出的最大二叉树。

返回有给定数组 nums 构建的 最大二叉树 。

 

示例 1：

输入：nums = [3,2,1,6,0,5]
输出：[6,3,5,null,2,0,null,null,1]
解释：递归调用如下所示：
- [3,2,1,6,0,5] 中的最大值是 6 ，左边部分是 [3,2,1] ，右边部分是 [0,5] 。
    - [3,2,1] 中的最大值是 3 ，左边部分是 [] ，右边部分是 [2,1] 。
        - 空数组，无子节点。
        - [2,1] 中的最大值是 2 ，左边部分是 [] ，右边部分是 [1] 。
            - 空数组，无子节点。
            - 只有一个元素，所以子节点是一个值为 1 的节点。
    - [0,5] 中的最大值是 5 ，左边部分是 [0] ，右边部分是 [] 。
        - 只有一个元素，所以子节点是一个值为 0 的节点。
        - 空数组，无子节点。


示例 2：

输入：nums = [3,2,1]
输出：[3,null,2,null,1]


 

提示：

1 <= nums.length <= 1000
0 <= nums[i] <= 1000
nums 中的所有整数 互不相同
```

## 时间

- 2021年7月24日

## 前置知识

- 递归

## 思路

## 关键点

-  递归算法的关键要明确函数的定义，相信这个定义，而不要跳进递归细节。
- 写二叉树的算法题，都是基于递归框架的，我们先要搞清楚root节点它自己要做什么，然后根据题目要求选择使用前序，中序，后续的递归框架。
- 二叉树题目的难点在于如何通过题目的要求思考出每一个节点需要做什么，这个只能通过多刷题进行练习了。

## 代码

- 语言支持：Java

Java Code:

```java

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        return build(nums, 0, nums.length-1);
    }

    /* 将 nums[low, high] 构造成符合条件的树，返回根节点 */
    public TreeNode build(int[] nums, int low, int high) {
        // base case
        if (low > high) return null;

        // 找到数组中的最大值和对应的索引
        int index=-1, maxVal=Integer.MIN_VALUE;
        for (int i = low; i <= high; i++) {
            if (maxVal < nums[i]) {
                maxVal = nums[i];
                index = i;
            }
        }
        TreeNode root = new TreeNode(maxVal);
        root.left = build(nums, low, index-1);
        root.right = build(nums, index+1, high);
        return root;
    }
}

```


**复杂度分析**

时间复杂度：$O(n^2)$。方法 $construct$ 一共被调用 $n$ 次。每次递归寻找根节点时，需要遍历当前索引范围内所有元素找出最大值。一般情况下，每次遍历的复杂度为 $O(\log n)$，总复杂度为 $O\big(n\log n\big)$。最坏的情况下，数组 $nums$ 有序，总的复杂度为 $O(n^2)$。

空间复杂度：$O(n)$。递归调用深度为 $n$。平均情况下，长度为 $n$ 的数组递归调用深度为 $O(\log n)$。



